{"version":3,"sources":["components/counter/Counter.jsx","components/todo/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["CounterButton","Component","className","onClick","props","incrementMethod","by","this","decrementMethod","TodoApp","path","component","LoginComponent","WelcomeComponent","state","username","password","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","console","log","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAkDMA,G,MA9CgBC,Y,kDA+ClB,aAAe,wC,qDAIL,IAAD,OACL,OACI,yBAAKC,UAAU,WACX,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,gBAAgB,EAAKD,MAAME,MAA7D,IAAqEC,KAAKH,MAAME,IAChF,4BAAQH,QAAS,kBAAM,EAAKC,MAAMI,gBAAgB,EAAKJ,MAAME,MAA7D,IAAqEC,KAAKH,MAAME,S,GATpEL,c,uBC/CtBQ,E,uKAEE,OACI,yBAAKP,UAAU,WACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,U,GANhCZ,aAchBY,E,uKAEE,OAAO,iD,GAFgBZ,aAKzBW,E,kDACF,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACTC,SAAU,OACVC,SAAU,GACVC,gBAAgB,EAChBC,oBAAoB,GAExB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBATH,E,yDAYNE,GAETf,KAAKgB,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,U,qCAWzB,SAAtBnB,KAAKO,MAAMC,UAA2C,UAAtBR,KAAKO,MAAME,UAC1CW,QAAQC,IAAI,cACZrB,KAAKgB,SAAS,CAAEL,oBAAoB,IACpCX,KAAKgB,SAAS,CAACN,gBAAe,MAI9BV,KAAKgB,SAAS,CAAEL,oBAAoB,IACpCX,KAAKgB,SAAS,CAACN,gBAAe,O,+BAMlC,OACI,6BAEKV,KAAKO,MAAMG,gBAAkB,qDAE7BV,KAAKO,MAAMI,oBAAsB,iDAJtC,cAKe,2BAAOW,KAAK,OAAOJ,KAAK,WAAWC,MAAOnB,KAAKO,MAAMC,SAAUe,SAAUvB,KAAKY,eAL7F,aAMc,2BAAOU,KAAK,WAAWJ,KAAK,WAAWC,MAAOnB,KAAKO,MAAME,SAAUc,SAAUvB,KAAKY,eAC5F,4BAAQhB,QAASI,KAAKc,cAAtB,c,GAhDapB,aAmEdQ,IC1EAsB,G,6KARX,OACE,yBAAK7B,UAAU,OACZ,kBAAC,EAAD,W,GAJSD,cCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.5335412f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './Counter.css'\n\nclass Counter extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            counter: 0\n        }\n        this.increment = this.increment.bind(this);\n        this.decrement = this.decrement.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"counter\">\n                <CounterButton by={100} incrementMethod={this.increment} decrementMethod={this.decrement} />\n                <CounterButton by={10} incrementMethod={this.increment} decrementMethod={this.decrement} />\n                <CounterButton by={5} incrementMethod={this.increment} decrementMethod={this.decrement} />\n                <CounterButton by={1} incrementMethod={this.increment} decrementMethod={this.decrement} />\n\n                <span className=\"count\">{this.state.counter}</span>\n                <div><button className=\"reset\" onClick={this.reset}>Reset</button></div>\n            </div>\n        );\n    }\n\n    reset() {\n        this.setState({ counter: 0 });\n    }\n    increment(by) {\n        this.setState(\n            (prevState) => {\n                return { counter: prevState.counter + by }\n            }\n        );\n    }\n\n    decrement(by) {\n        this.setState(\n            (prevState) => {\n                return { counter: prevState.counter - by }\n            }\n        );\n    }\n}\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div className=\"counter\">\n                <button onClick={() => this.props.incrementMethod(this.props.by)} >+{this.props.by}</button>\n                <button onClick={() => this.props.decrementMethod(this.props.by)} >-{this.props.by}</button>\n            </div>\n        )\n    }\n}\nCounterButton.propTypes = {\n    by: PropTypes.number\n}\n\nexport default Counter","import React, { Component } from 'react'\nimport {BrowserRouter as Router,Route} from 'react-router-dom'\n\nclass TodoApp extends Component {\n    render() {\n        return (\n            <div className=\"TodoApp\">\n                <Router>\n                    <Route path=\"/login\" component={LoginComponent}/>\n                    <Route path=\"/welcome\" component={WelcomeComponent}/>\n                </Router>\n                {/* <LoginComponent />\n                <WelcomeComponent/> */}\n            </div>\n        )\n    }\n}\nclass WelcomeComponent extends Component{\n    render(){\n        return <div>Welcome Vyom</div>\n    }\n}\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: 'vyom',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked=this.loginClicked.bind(this)\n        // this.handlePasswordChange= this.handlePasswordChange.bind   (this)\n    }\n    handleChange(event) {\n        // console.log(this.state);\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    // handleUsernameChange(event) {\n    //     console.log(event.target.name);\n    //     this.setState({ [event.target.name]: event.target.value })\n    // }\n    // handlePasswordChange(event) {\n    //     console.log(event.target.value);\n    //     this.setState({ password: event.target.value })\n    // }\n    loginClicked(){\n        if(this.state.username==='vyom' && this.state.password==='dummy'){\n            console.log('Successful')\n            this.setState({ showSuccessMessage: true })\n            this.setState({hasLoginFailed:false})\n        }\n            \n        else{\n            this.setState({ showSuccessMessage: false })\n            this.setState({hasLoginFailed:true})\n        }\n            \n        // console.log(this.state)\n    }\n    render() {\n        return (\n            <div>\n                {/* <ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>   */}\n                {this.state.hasLoginFailed && <div> Invalid Credentials</div>}      \n                {/* <ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/> */}\n                {this.state.showSuccessMessage && <div>Login Successful</div> }\n                User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                <button onClick={this.loginClicked}>Login</button>\n            </div>\n        )\n    }\n    \n\n}\n// function ShowInvalidCredentials(props) {\n//     if(props.hasLoginFailed){\n//         return <div> Invalid Credentials</div>\n//     }\n//     return null    \n// }\n// function ShowLoginSuccessMessage(props){\n//     if(props.showSuccessMessage){\n//         return <div>Login Successful</div>\n//     }\n//     return null\n// }\nexport default TodoApp\n","import React, { Component } from 'react';\nimport Counter from './components/counter/Counter'\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n         <TodoApp/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}